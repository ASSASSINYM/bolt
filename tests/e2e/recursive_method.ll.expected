; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-apple-darwin18.7.0"

%_VtableFoo = type { i32 (%Foo*, i32)* }
%Foo = type { %_VtableFoo*, i8*, i32, i32, i32, i32 }
%structPtrArgType = type { %Foo* }

@_VtableFoo = global %_VtableFoo { i32 (%Foo*, i32)* @_Foo__setgi }
@0 = private unnamed_addr constant [18 x i8] c"Value of x.f: %d\0A\00", align 1
@1 = private unnamed_addr constant [18 x i8] c"Value of y.g: %d\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @GC_malloc(i64)

declare i32 @pthread_create(i8**, i8*, i8* (i8*)*, i8*)

declare i32 @pthread_join(i8*, i8**)

declare i32 @pthread_equal(i8*, i8*)

declare i8* @pthread_self()

define i32 @_Foo__setgi(%Foo*, i32) {
entry:
  %2 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 1
  %3 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 2
  %4 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 3
  %5 = call i8* @pthread_self()
  br label %spinOnLockFree

spinOnLockFree:                                   ; preds = %attemptlockInc, %spinOnLockFree, %entry
  %6 = load i32, i32* %3, align 4
  %7 = load i32, i32* %4, align 4
  %8 = load i8*, i8** %2, align 8
  %noWritersPresent = icmp eq i32 %7, 0
  %9 = call i32 @pthread_equal(i8* %8, i8* %5)
  %currThreadOwnsWriteLock = icmp ne i32 %9, 0
  %noWritersPresentOnOtherThreads = or i1 %noWritersPresent, %currThreadOwnsWriteLock
  %noReadersPresent = icmp eq i32 %6, 0
  %canAcquireWriteLock = and i1 %noReadersPresent, %noWritersPresentOnOtherThreads
  br i1 %canAcquireWriteLock, label %attemptlockInc, label %spinOnLockFree

attemptlockInc:                                   ; preds = %spinOnLockFree
  %inc = add i32 %7, 1
  %10 = cmpxchg i32* %4, i32 %7, i32 %inc seq_cst monotonic
  %11 = alloca { i32, i1 }, align 8
  store { i32, i1 } %10, { i32, i1 }* %11, align 8
  %12 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %11, i64 0, i32 1
  %13 = load i1, i1* %12, align 4
  br i1 %13, label %enterLock, label %spinOnLockFree

enterLock:                                        ; preds = %attemptlockInc
  store i8* %5, i8** %2, align 8
  %gt = icmp sgt i32 %1, 0
  br i1 %gt, label %then, label %else

then:                                             ; preds = %enterLock
  %14 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 0
  %15 = load %_VtableFoo*, %_VtableFoo** %14, align 8
  %16 = getelementptr inbounds %_VtableFoo, %_VtableFoo* %15, i64 0, i32 0
  %17 = load i32 (%Foo*, i32)*, i32 (%Foo*, i32)** %16, align 8
  %neg = sub i32 0, %1
  %18 = call i32 %17(%Foo* %0, i32 %neg)
  %.pre = load i32, i32* %4, align 4
  br label %ifcont

else:                                             ; preds = %enterLock
  %19 = getelementptr inbounds %Foo, %Foo* %0, i64 0, i32 5
  %20 = call i8* @pthread_self()
  br label %spinOnLockFree1

spinOnLockFree1:                                  ; preds = %attemptlockInc2, %spinOnLockFree1, %else
  %21 = load i32, i32* %3, align 4
  %22 = load i32, i32* %4, align 4
  %23 = load i8*, i8** %2, align 8
  %noWritersPresent4 = icmp eq i32 %22, 0
  %24 = call i32 @pthread_equal(i8* %23, i8* %20)
  %currThreadOwnsWriteLock5 = icmp ne i32 %24, 0
  %noWritersPresentOnOtherThreads6 = or i1 %noWritersPresent4, %currThreadOwnsWriteLock5
  %noReadersPresent7 = icmp eq i32 %21, 0
  %canAcquireWriteLock8 = and i1 %noReadersPresent7, %noWritersPresentOnOtherThreads6
  br i1 %canAcquireWriteLock8, label %attemptlockInc2, label %spinOnLockFree1

attemptlockInc2:                                  ; preds = %spinOnLockFree1
  %inc9 = add i32 %22, 1
  %25 = cmpxchg i32* %4, i32 %22, i32 %inc9 seq_cst monotonic
  %26 = alloca { i32, i1 }, align 8
  store { i32, i1 } %25, { i32, i1 }* %26, align 8
  %27 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %26, i64 0, i32 1
  %28 = load i1, i1* %27, align 4
  br i1 %28, label %enterLock3, label %spinOnLockFree1

enterLock3:                                       ; preds = %attemptlockInc2
  store i8* %20, i8** %2, align 8
  store i32 %1, i32* %19, align 4
  %29 = load i32, i32* %4, align 4
  %gt10 = icmp sgt i32 %29, 1
  br i1 %gt10, label %unlockDec, label %unlockMemFence

unlockMemFence:                                   ; preds = %enterLock3
  fence seq_cst
  br label %unlockDec

unlockDec:                                        ; preds = %unlockMemFence, %enterLock3
  %dec = add i32 %29, -1
  store i32 %dec, i32* %4, align 4
  br label %ifcont

ifcont:                                           ; preds = %unlockDec, %then
  %30 = phi i32 [ %.pre, %then ], [ %dec, %unlockDec ]
  %iftmp = phi i32 [ %18, %then ], [ %1, %unlockDec ]
  %gt11 = icmp sgt i32 %30, 1
  br i1 %gt11, label %unlockDec13, label %unlockMemFence12

unlockMemFence12:                                 ; preds = %ifcont
  fence seq_cst
  br label %unlockDec13

unlockDec13:                                      ; preds = %unlockMemFence12, %ifcont
  %dec14 = add i32 %30, -1
  store i32 %dec14, i32* %4, align 4
  ret i32 %iftmp
}

define i32 @main() {
entry:
  %0 = call i8* @GC_malloc(i64 32)
  %1 = bitcast i8* %0 to %_VtableFoo**
  store %_VtableFoo* @_VtableFoo, %_VtableFoo** %1, align 8
  %2 = getelementptr inbounds i8, i8* %0, i64 16
  %3 = bitcast i8* %2 to i32*
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds i8, i8* %0, i64 20
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %0, i64 24
  %7 = bitcast i8* %6 to i32*
  store i32 100, i32* %7, align 4
  %8 = call i8* @GC_malloc(i64 32)
  %9 = bitcast i8* %8 to %Foo*
  %10 = bitcast i8* %8 to %_VtableFoo**
  store %_VtableFoo* @_VtableFoo, %_VtableFoo** %10, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %8, i64 20
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 4
  %pthread = alloca i8*, align 8
  %15 = alloca %structPtrArgType, align 8
  %16 = bitcast %structPtrArgType* %15 to i8**
  store i8* %0, i8** %16, align 8
  %17 = bitcast %structPtrArgType* %15 to i8*
  %18 = call i32 @pthread_create(i8** nonnull %pthread, i8* null, i8* (i8*)* nonnull @_async0, i8* nonnull %17)
  %19 = load %_VtableFoo*, %_VtableFoo** %10, align 8
  %20 = getelementptr inbounds %_VtableFoo, %_VtableFoo* %19, i64 0, i32 0
  %21 = load i32 (%Foo*, i32)*, i32 (%Foo*, i32)** %20, align 8
  %22 = call i32 %21(%Foo* %9, i32 10)
  %23 = getelementptr inbounds i8, i8* %8, i64 28
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds i8, i8* %8, i64 8
  %26 = bitcast i8* %25 to i8**
  %27 = call i8* @pthread_self()
  br label %spinOnLockFree

spinOnLockFree:                                   ; preds = %attemptlockInc, %spinOnLockFree, %entry
  %28 = load i32, i32* %12, align 4
  %29 = load i32, i32* %14, align 4
  %30 = load i8*, i8** %26, align 8
  %noWritersPresent = icmp eq i32 %29, 0
  %31 = call i32 @pthread_equal(i8* %30, i8* %27)
  %currThreadOwnsWriteLock = icmp ne i32 %31, 0
  %noWritersPresentOnOtherThreads = or i1 %noWritersPresent, %currThreadOwnsWriteLock
  br i1 %noWritersPresentOnOtherThreads, label %attemptlockInc, label %spinOnLockFree

attemptlockInc:                                   ; preds = %spinOnLockFree
  %inc = add i32 %28, 1
  %32 = cmpxchg i32* %12, i32 %28, i32 %inc seq_cst monotonic
  %33 = alloca { i32, i1 }, align 8
  store { i32, i1 } %32, { i32, i1 }* %33, align 8
  %34 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %33, i64 0, i32 1
  %35 = load i1, i1* %34, align 4
  br i1 %35, label %enterLock, label %spinOnLockFree

enterLock:                                        ; preds = %attemptlockInc
  store i8* %27, i8** %26, align 8
  %36 = load i32, i32* %24, align 4
  %37 = load i32, i32* %12, align 4
  %gt = icmp sgt i32 %37, 1
  br i1 %gt, label %unlockDec, label %unlockMemFence

unlockMemFence:                                   ; preds = %enterLock
  fence seq_cst
  br label %unlockDec

unlockDec:                                        ; preds = %unlockMemFence, %enterLock
  %dec = add i32 %37, -1
  store i32 %dec, i32* %12, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0), i32 %36)
  %39 = load i8*, i8** %pthread, align 8
  %40 = call i32 @pthread_join(i8* %39, i8** null)
  ret i32 0
}

define i8* @_async0(i8*) {
entry:
  %1 = bitcast i8* %0 to %structPtrArgType*
  %2 = getelementptr inbounds %structPtrArgType, %structPtrArgType* %1, i32 0, i32 0
  %3 = load %Foo*, %Foo** %2
  %_x0 = alloca %Foo*
  store %Foo* %3, %Foo** %_x0
  %4 = load %Foo*, %Foo** %_x0
  %5 = getelementptr inbounds %Foo, %Foo* %4, i32 0, i32 4
  %6 = load i32, i32* %5
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i32 0, i32 0), i32 %6)
  ret i8* null
}
