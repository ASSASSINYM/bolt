; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-apple-darwin18.7.0"

%_VtableFoo = type { i32 (%Foo*, i32)* }
%Foo = type { %_VtableFoo*, %pthread_t*, i32, i32, i32, i32 }
%pthread_t = type opaque
%function_arg_type = type { %Foo* }

@_VtableFoo = common global %_VtableFoo { i32 (%Foo*, i32)* @_Foo__setgi }
@0 = private unnamed_addr constant [18 x i8] c"Value of x.f: %d\0A\00", align 1
@1 = private unnamed_addr constant [18 x i8] c"Value of y.g: %d\0A\00", align 1

declare i32 @printf(i8*, ...)

declare i8* @malloc(i64)

declare i32 @pthread_create(%pthread_t**, i8*, i8* (i8*)*, i8*)

declare i32 @pthread_join(%pthread_t*, i8**)

declare i32 @pthread_equal(%pthread_t*, %pthread_t*)

declare %pthread_t* @pthread_self()

define i32 @_Foo__setgi(%Foo*, i32) {
entry:
  %_ret_val = alloca i32
  %this = alloca %Foo*
  store %Foo* %0, %Foo** %this
  %x = alloca i32
  store i32 %1, i32* %x
  %2 = load %Foo*, %Foo** %this
  %3 = getelementptr inbounds %Foo, %Foo* %2, i32 0, i32 1
  %4 = getelementptr inbounds %Foo, %Foo* %2, i32 0, i32 2
  %5 = getelementptr inbounds %Foo, %Foo* %2, i32 0, i32 3
  %6 = call %pthread_t* @pthread_self()
  br label %spinOnLockFree

spinOnLockFree:                                   ; preds = %attemptlockInc, %spinOnLockFree, %entry
  %7 = load i32, i32* %4
  %8 = load i32, i32* %5
  %9 = load %pthread_t*, %pthread_t** %3
  %noWritersPresent = icmp eq i32 %8, 0
  %10 = call i32 @pthread_equal(%pthread_t* %9, %pthread_t* %6)
  %currThreadOwnsWriteLock = icmp ne i32 %10, 0
  %noWritersPresentOnOtherThreads = or i1 %noWritersPresent, %currThreadOwnsWriteLock
  %noReadersPresent = icmp eq i32 %7, 0
  %canAcquireWriteLock = and i1 %noReadersPresent, %noWritersPresentOnOtherThreads
  br i1 %canAcquireWriteLock, label %attemptlockInc, label %spinOnLockFree

attemptlockInc:                                   ; preds = %spinOnLockFree
  %inc = add i32 %8, 1
  %11 = cmpxchg i32* %5, i32 %8, i32 %inc seq_cst monotonic
  %12 = alloca { i32, i1 }
  store { i32, i1 } %11, { i32, i1 }* %12
  %13 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %12, i32 0, i32 1
  %14 = load i1, i1* %13
  br i1 %14, label %enterLock, label %spinOnLockFree

enterLock:                                        ; preds = %attemptlockInc
  store %pthread_t* %6, %pthread_t** %3
  %15 = load i32, i32* %x
  %gt = icmp sgt i32 %15, 0
  br i1 %gt, label %then, label %else

then:                                             ; preds = %enterLock
  %16 = load %Foo*, %Foo** %this
  %17 = load i32, i32* %x
  %neg = sub i32 0, %17
  %18 = call i32 @_Foo__setgi(%Foo* %16, i32 %neg)
  br label %ifcont

else:                                             ; preds = %enterLock
  %19 = load i32, i32* %x
  %20 = load %Foo*, %Foo** %this
  %21 = getelementptr inbounds %Foo, %Foo* %20, i32 0, i32 5
  %22 = load %Foo*, %Foo** %this
  %23 = getelementptr inbounds %Foo, %Foo* %22, i32 0, i32 1
  %24 = getelementptr inbounds %Foo, %Foo* %22, i32 0, i32 2
  %25 = getelementptr inbounds %Foo, %Foo* %22, i32 0, i32 3
  %26 = call %pthread_t* @pthread_self()
  br label %spinOnLockFree1

spinOnLockFree1:                                  ; preds = %attemptlockInc2, %spinOnLockFree1, %else
  %27 = load i32, i32* %24
  %28 = load i32, i32* %25
  %29 = load %pthread_t*, %pthread_t** %23
  %noWritersPresent4 = icmp eq i32 %28, 0
  %30 = call i32 @pthread_equal(%pthread_t* %29, %pthread_t* %26)
  %currThreadOwnsWriteLock5 = icmp ne i32 %30, 0
  %noWritersPresentOnOtherThreads6 = or i1 %noWritersPresent4, %currThreadOwnsWriteLock5
  %noReadersPresent7 = icmp eq i32 %27, 0
  %canAcquireWriteLock8 = and i1 %noReadersPresent7, %noWritersPresentOnOtherThreads6
  br i1 %canAcquireWriteLock8, label %attemptlockInc2, label %spinOnLockFree1

attemptlockInc2:                                  ; preds = %spinOnLockFree1
  %inc9 = add i32 %28, 1
  %31 = cmpxchg i32* %25, i32 %28, i32 %inc9 seq_cst monotonic
  %32 = alloca { i32, i1 }
  store { i32, i1 } %31, { i32, i1 }* %32
  %33 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %32, i32 0, i32 1
  %34 = load i1, i1* %33
  br i1 %34, label %enterLock3, label %spinOnLockFree1

enterLock3:                                       ; preds = %attemptlockInc2
  store %pthread_t* %26, %pthread_t** %23
  store i32 %19, i32* %21
  %35 = load %Foo*, %Foo** %this
  %36 = getelementptr inbounds %Foo, %Foo* %35, i32 0, i32 3
  %37 = load i32, i32* %36
  %gt10 = icmp sgt i32 %37, 1
  br i1 %gt10, label %unlockDec, label %unlockMemFence

unlockMemFence:                                   ; preds = %enterLock3
  fence seq_cst
  br label %unlockDec

unlockDec:                                        ; preds = %unlockMemFence, %enterLock3
  %dec = sub i32 %37, 1
  store i32 %dec, i32* %36
  br label %ifcont

ifcont:                                           ; preds = %unlockDec, %then
  %iftmp = phi i32 [ %18, %then ], [ %19, %unlockDec ]
  store i32 %iftmp, i32* %_ret_val
  %38 = load %Foo*, %Foo** %this
  %39 = getelementptr inbounds %Foo, %Foo* %38, i32 0, i32 3
  %40 = load i32, i32* %39
  %gt11 = icmp sgt i32 %40, 1
  br i1 %gt11, label %unlockDec13, label %unlockMemFence12

unlockMemFence12:                                 ; preds = %ifcont
  fence seq_cst
  br label %unlockDec13

unlockDec13:                                      ; preds = %unlockMemFence12, %ifcont
  %dec14 = sub i32 %40, 1
  store i32 %dec14, i32* %39
  %41 = load i32, i32* %_ret_val
  ret i32 %41
}

define i32 @main() {
entry:
  %_var_y0 = alloca %Foo*
  %_var_x0 = alloca %Foo*
  %0 = call i8* @malloc(i64 ptrtoint (%Foo* getelementptr (%Foo, %Foo* null, i64 1) to i64))
  %1 = bitcast i8* %0 to %Foo*
  %2 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 0
  store %_VtableFoo* @_VtableFoo, %_VtableFoo** %2
  %3 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 2
  store i32 0, i32* %3
  %4 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 3
  store i32 0, i32* %4
  %5 = getelementptr inbounds %Foo, %Foo* %1, i32 0, i32 4
  store i32 100, i32* %5
  store %Foo* %1, %Foo** %_var_x0
  %6 = call i8* @malloc(i64 ptrtoint (%Foo* getelementptr (%Foo, %Foo* null, i64 1) to i64))
  %7 = bitcast i8* %6 to %Foo*
  %8 = getelementptr inbounds %Foo, %Foo* %7, i32 0, i32 0
  store %_VtableFoo* @_VtableFoo, %_VtableFoo** %8
  %9 = getelementptr inbounds %Foo, %Foo* %7, i32 0, i32 2
  store i32 0, i32* %9
  %10 = getelementptr inbounds %Foo, %Foo* %7, i32 0, i32 3
  store i32 0, i32* %10
  store %Foo* %7, %Foo** %_var_y0
  %pthreadPtr = alloca %pthread_t*
  %11 = alloca %function_arg_type
  %12 = load %Foo*, %Foo** %_var_x0
  %13 = getelementptr inbounds %function_arg_type, %function_arg_type* %11, i32 0, i32 0
  store %Foo* %12, %Foo** %13
  %14 = bitcast %function_arg_type* %11 to i8*
  %15 = call i32 @pthread_create(%pthread_t** %pthreadPtr, i8* null, i8* (i8*)* @_async0, i8* %14)
  %16 = load %Foo*, %Foo** %_var_y0
  %17 = call i32 @_Foo__setgi(%Foo* %16, i32 10)
  %18 = load %Foo*, %Foo** %_var_y0
  %19 = getelementptr inbounds %Foo, %Foo* %18, i32 0, i32 5
  %20 = load %Foo*, %Foo** %_var_y0
  %21 = getelementptr inbounds %Foo, %Foo* %20, i32 0, i32 1
  %22 = getelementptr inbounds %Foo, %Foo* %20, i32 0, i32 2
  %23 = getelementptr inbounds %Foo, %Foo* %20, i32 0, i32 3
  %24 = call %pthread_t* @pthread_self()
  br label %spinOnLockFree

spinOnLockFree:                                   ; preds = %attemptlockInc, %spinOnLockFree, %entry
  %25 = load i32, i32* %22
  %26 = load i32, i32* %23
  %27 = load %pthread_t*, %pthread_t** %21
  %noWritersPresent = icmp eq i32 %26, 0
  %28 = call i32 @pthread_equal(%pthread_t* %27, %pthread_t* %24)
  %currThreadOwnsWriteLock = icmp ne i32 %28, 0
  %noWritersPresentOnOtherThreads = or i1 %noWritersPresent, %currThreadOwnsWriteLock
  br i1 %noWritersPresentOnOtherThreads, label %attemptlockInc, label %spinOnLockFree

attemptlockInc:                                   ; preds = %spinOnLockFree
  %inc = add i32 %25, 1
  %29 = cmpxchg i32* %22, i32 %25, i32 %inc seq_cst monotonic
  %30 = alloca { i32, i1 }
  store { i32, i1 } %29, { i32, i1 }* %30
  %31 = getelementptr inbounds { i32, i1 }, { i32, i1 }* %30, i32 0, i32 1
  %32 = load i1, i1* %31
  br i1 %32, label %enterLock, label %spinOnLockFree

enterLock:                                        ; preds = %attemptlockInc
  store %pthread_t* %24, %pthread_t** %21
  %33 = load i32, i32* %19
  %34 = load %Foo*, %Foo** %_var_y0
  %35 = getelementptr inbounds %Foo, %Foo* %34, i32 0, i32 2
  %36 = load i32, i32* %35
  %gt = icmp sgt i32 %36, 1
  br i1 %gt, label %unlockDec, label %unlockMemFence

unlockMemFence:                                   ; preds = %enterLock
  fence seq_cst
  br label %unlockDec

unlockDec:                                        ; preds = %unlockMemFence, %enterLock
  %dec = sub i32 %36, 1
  store i32 %dec, i32* %35
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i32 0, i32 0), i32 %33)
  %38 = load %pthread_t*, %pthread_t** %pthreadPtr
  %39 = call i32 @pthread_join(%pthread_t* %38, i8** null)
  ret i32 0
}

define i8* @_async0(i8*) {
entry:
  %1 = bitcast i8* %0 to %function_arg_type*
  %2 = getelementptr inbounds %function_arg_type, %function_arg_type* %1, i32 0, i32 0
  %3 = load %Foo*, %Foo** %2
  %_var_x0 = alloca %Foo*
  store %Foo* %3, %Foo** %_var_x0
  %4 = load %Foo*, %Foo** %_var_x0
  %5 = getelementptr inbounds %Foo, %Foo* %4, i32 0, i32 4
  %6 = load i32, i32* %5
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i32 0, i32 0), i32 %6)
  ret i8* null
}
