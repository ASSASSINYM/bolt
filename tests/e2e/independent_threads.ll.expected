; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-apple-darwin18.7.0"

%Foo = type { i32, i32, i32 }
%function_arg_type = type {}
%function_arg_type.0 = type {}

@0 = private unnamed_addr constant [19 x i8] c"Value of x.f: %d\5Cn\00", align 1

declare i32 @printf(i8*, ...)

declare i32 @pthread_create([100 x i64]*, i8*, i8* (i8*)*, i8*)

declare i32 @pthread_join([100 x i64]*, i8**)

define i32 @f(i32) {
entry:
  %x = alloca i32
  store i32 %0, i32* %x
  %1 = load i32, i32* %x
  ret i32 %1
}

define i32 @main() {
entry:
  %_var_x0 = alloca %Foo
  %Foo = alloca %Foo
  %0 = getelementptr inbounds %Foo, %Foo* %Foo, i32 0, i32 0
  store i32 5, i32* %0
  %1 = load %Foo, %Foo* %Foo
  store %Foo %1, %Foo* %_var_x0
  %pthread = alloca [100 x i64]
  %2 = alloca %function_arg_type
  %3 = bitcast %function_arg_type* %2 to i8*
  %4 = call i32 @pthread_create([100 x i64]* %pthread, i8* null, i8* (i8*)* @_async0, i8* %3)
  %pthread1 = alloca [100 x i64]
  %5 = alloca %function_arg_type.0
  %6 = bitcast %function_arg_type.0* %5 to i8*
  %7 = call i32 @pthread_create([100 x i64]* %pthread1, i8* null, i8* (i8*)* @_async1, i8* %6)
  %8 = getelementptr inbounds %Foo, %Foo* %_var_x0, i32 0, i32 0
  %9 = load i32, i32* %8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i32 0, i32 0), i32 %9)
  %11 = call i32 @pthread_join([100 x i64]* %pthread, i8** null)
  %12 = call i32 @pthread_join([100 x i64]* %pthread1, i8** null)
  ret i32 0
}

define i8* @_async0(i8*) {
entry:
  %1 = bitcast i8* %0 to %function_arg_type*
  %2 = call i32 @f(i32 5)
  ret i8* null
}

define i8* @_async1(i8*) {
entry:
  %_var_w0 = alloca %Foo
  %1 = bitcast i8* %0 to %function_arg_type.0*
  %Foo = alloca %Foo
  %2 = getelementptr inbounds %Foo, %Foo* %Foo, i32 0, i32 1
  store i32 5, i32* %2
  %3 = load %Foo, %Foo* %Foo
  store %Foo %3, %Foo* %_var_w0
  %4 = getelementptr inbounds %Foo, %Foo* %_var_w0, i32 0, i32 0
  store i32 5, i32* %4
  ret i8* null
}
